diff --git prisma/schema.prisma prisma/schema.prisma
index 1984365..6796927 100644
--- prisma/schema.prisma
+++ prisma/schema.prisma
@@ -1,131 +1,180 @@
 // This is your Prisma schema file,
 // learn more about it in the docs: https://pris.ly/d/prisma-schema
 
 // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
 // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
 
 generator client {
     provider = "prisma-client-js"
     output   = "../generated/prisma"
 }
 
 datasource db {
     provider = "sqlite"
     url      = "file:./dev.db"
 }
 
 enum ArtworkStatus {
     PORTFOLIO
     EVENT
     MATCHED
     FLAGGED
 }
 
 enum NotificationType {
     MATCH
     EVENT
     FLAG
     OTHER
 }
 
+enum EventPhase {
+    OPEN
+    VOTING
+    CLOSED
+    ARCHIVED
+}
+
+enum MatchStatus {
+    PENDING
+    COMPLETED
+    CANCELLED
+}
+
+enum FlagStatus {
+    PENDING
+    RESOLVED
+}
+
 enum InvitationStatus {
     PENDING
     ACCEPTED
     EXPIRED
 }
 
 model Artist {
     id               String            @id @default(uuid())
     email            String            @unique
     passwordHash     String
     fullName         String
     profilePic       String? // URL or file path
     memberships      GroupMembership[]
     artworks         Artwork[]
     notifications    Notification[]
+    votes            Vote[]
+    flags            ArtworkFlag[]
     createdAt        DateTime          @default(now())
     resetToken       String? // for password reset
     resetTokenExpiry DateTime?
 }
 
 model Group {
     id          String            @id @default(uuid())
     name        String
     memberships GroupMembership[]
     events      Event[]
     createdAt   DateTime          @default(now())
     Invitation  Invitation[]
 }
 
 model GroupMembership {
     id        String   @id @default(uuid())
     artist    Artist   @relation(fields: [artistId], references: [id])
     artistId  String
     group     Group    @relation(fields: [groupId], references: [id])
     groupId   String
     isAdmin   Boolean  @default(false)
     createdAt DateTime @default(now())
 
     @@unique([artistId, groupId])
 }
 
 model Event {
     id              String     @id @default(uuid())
     group           Group      @relation(fields: [groupId], references: [id])
     groupId         String
-    phase           String // open, voting, closed, archived
+    phase           EventPhase // open, voting, closed, archived
     submissionLimit Int
     artworks        Artwork[]
     matches         Match[]
+    votes           Vote[]
     createdAt       DateTime   @default(now())
 }
 
 model Artwork {
     id          String        @id @default(uuid())
     artist      Artist        @relation(fields: [artistId], references: [id])
     artistId    String
     event       Event?        @relation(fields: [eventId], references: [id])
     eventId     String?
     title       String
     description String?
     medium      String?
     dimensions  String?
     year        Int?
     images      Json // Array of file paths or URLs
     status      ArtworkStatus
     createdAt   DateTime      @default(now())
     Match1      Match?        @relation("MatchArtwork1")
     Match2      Match?        @relation("MatchArtwork2")
+    votes       Vote[]
+    flags       ArtworkFlag[]
 }
 
 model Match {
     id         String      @id @default(uuid())
     event      Event       @relation(fields: [eventId], references: [id])
     eventId    String
     artwork1   Artwork?    @relation("MatchArtwork1", fields: [artwork1Id], references: [id])
     artwork1Id String      @unique
     artwork2   Artwork?    @relation("MatchArtwork2", fields: [artwork2Id], references: [id])
     artwork2Id String      @unique
-    status     String // e.g., pending, completed
+    status     MatchStatus // e.g., pending, completed
+    createdAt  DateTime    @default(now())
+}
+
+model Vote {
+    id        String   @id @default(uuid())
+    voter     Artist   @relation(fields: [voterId], references: [id])
+    voterId   String
+    artwork   Artwork  @relation(fields: [artworkId], references: [id])
+    artworkId String
+    event     Event    @relation(fields: [eventId], references: [id])
+    eventId   String
+    liked     Boolean
+    createdAt DateTime @default(now())
+
+    @@unique([voterId, artworkId, eventId])
+}
+
+model ArtworkFlag {
+    id         String     @id @default(uuid())
+    artwork    Artwork    @relation(fields: [artworkId], references: [id])
+    artworkId  String
+    flagger    Artist     @relation(fields: [flaggerId], references: [id])
+    flaggerId  String
+    reason     String?
+    status     FlagStatus @default(PENDING)
     createdAt  DateTime   @default(now())
+    resolvedAt DateTime?
 }
 
 model Invitation {
     id        String           @id @default(uuid())
     group     Group            @relation(fields: [groupId], references: [id])
     groupId   String
     email     String
     token     String           @unique
     status    InvitationStatus
     createdAt DateTime         @default(now())
 }
 
 model Notification {
     id        String           @id @default(uuid())
     artist    Artist           @relation(fields: [artistId], references: [id])
     artistId  String
     type      NotificationType
     message   String
     read      Boolean          @default(false)
     createdAt DateTime         @default(now())
 }
