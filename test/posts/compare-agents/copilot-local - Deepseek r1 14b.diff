diff --git prisma/schema.prisma prisma/schema.prisma
index 1984365..843d808 100644
--- prisma/schema.prisma
+++ prisma/schema.prisma
@@ -1,131 +1,143 @@
 // This is your Prisma schema file,
 // learn more about it in the docs: https://pris.ly/d/prisma-schema
 
 // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
 // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
 
 generator client {
     provider = "prisma-client-js"
     output   = "../generated/prisma"
 }
 
 datasource db {
     provider = "sqlite"
     url      = "file:./dev.db"
 }
 
 enum ArtworkStatus {
     PORTFOLIO
     EVENT
     MATCHED
     FLAGGED
 }
 
 enum NotificationType {
-  MATCH
-  EVENT
-  FLAG
-  OTHER
+    ACCOUNT_VERIFICATION
+    PASSWORD_RESET
+    NEW_MATCH
+    VOTE_NOTIFICATION
+    EVENT_STATUS_UPDATE
 }
 
 enum InvitationStatus {
     PENDING
     ACCEPTED
     EXPIRED
 }
 
-model Artist {
-    id            String            @id @default(uuid())
+model User {
+    id                  Int      @id @default(autoincrement())
+    username            String   @unique
     email               String   @unique
     passwordHash        String
-    fullName      String
-    profilePic    String? // URL or file path
-    memberships   GroupMembership[]
-    artworks      Artwork[]
-    notifications Notification[]
     createdAt           DateTime @default(now())
-    resetToken   String? // for password reset
-    resetTokenExpiry DateTime?
+    updatedAt           DateTime @default(now())
+    failedLoginAttempts Int      @default(0)
+    isLocked            Boolean  @default(false)
+    isVerified          Boolean  @default(false)
+
+    // Relationships
+    artist        Artist?        @oneToManyInverse(field: "userId")
+    invitations   Invitation[]   @manyToManyInverse(sourceField: "invitedUserId", targetField: "id")
+    notifications Notification[] @manyToManyInverse(sourceField: "userId", targetField: "id")
 }
 
-model Group {
-    id          String            @id @default(uuid())
+model Artist {
+    id            Int      @id @default(autoincrement())
+    userId        Int      @unique
     name          String
-    memberships GroupMembership[]
-    events      Event[]
+    description   String?
+    portfolioLink String?
     createdAt     DateTime @default(now())
-    Invitation  Invitation[]
+    updatedAt     DateTime @default(now())
+
+    // Relationships
+    user     User      @oneToOne(target: "artist")
+    artworks Artwork[] @manyToManyInverse(sourceField: "artistId", targetField: "id")
 }
 
-model GroupMembership {
-    id        String   @id @default(uuid())
-    artist    Artist   @relation(fields: [artistId], references: [id])
-    artistId  String
-    group     Group    @relation(fields: [groupId], references: [id])
-    groupId   String
-    isAdmin   Boolean  @default(false)
+model Group {
+    id          Int      @id @default(autoincrement())
+    name        String   @unique
+    description String
+    purpose     String
+    adminUserId Int      @unique
     createdAt   DateTime @default(now())
+    updatedAt   DateTime @default(now())
 
-    @@unique([artistId, groupId])
+    // Relationships
+    members User[] @manyToManyInverse(sourceField: "groupId", targetField: "id")
 }
 
 model Event {
-    id              String    @id @default(uuid())
-    group           Group     @relation(fields: [groupId], references: [id])
-    groupId         String
-    phase           String // open, voting, closed, archived
-    submissionLimit Int
-    artworks        Artwork[]
-    matches         Match[]
+    id          Int        @id @default(autoincrement())
+    name        String     @unique
+    description String
+    groupId     Int        @unique
+    phase       EventPhase @default(OPEN)
+    startDate   DateTime
+    endDate     DateTime
     createdAt   DateTime   @default(now())
+    updatedAt   DateTime   @default(now())
+
+    // Relationships
+    artworks Artwork[] @manyToManyInverse(sourceField: "eventId", targetField: "id")
 }
 
 model Artwork {
-    id          String   @id @default(uuid())
-    artist      Artist   @relation(fields: [artistId], references: [id])
-    artistId    String
-    event       Event?   @relation(fields: [eventId], references: [id])
-    eventId     String?
-    title       String
-    description String?
-    medium      String?
-    dimensions  String?
-    year        Int?
-    images      Json // Array of file paths or URLs
-    status      ArtworkStatus
-    createdAt   DateTime @default(now())
-    Match1      Match?   @relation("MatchArtwork1")
-    Match2      Match?   @relation("MatchArtwork2")
+    id          Int     @id @default(autoincrement())
+    title       String  @unique
+    description String
+    image       String  @unique
+    artistId    Int     @unique
+    eventId     Int?
+    voteCount   Int     @default(0)
+    isMatched   Boolean @default(false)
+
+    // Relationships
+    user User @oneToManyInverse(field: "artworks", targetField: "id")
 }
 
 model Match {
-    id         String   @id @default(uuid())
-    event      Event    @relation(fields: [eventId], references: [id])
-    eventId    String
-    artwork1   Artwork? @relation("MatchArtwork1", fields: [artwork1Id], references: [id])
-    artwork1Id String   @unique
-    artwork2   Artwork? @relation("MatchArtwork2", fields: [artwork2Id], references: [id])
-    artwork2Id String   @unique
-    status     String // e.g., pending, completed
-    createdAt  DateTime @default(now())
+    id          Int         @id @default(autoincrement())
+    artworkId   Int         @unique
+    userId1     Int         @unique
+    userId2     Int         @unique
+    matchStatus MatchStatus @default(PENDING)
+
+    // Relationships
+    artwork Artwork @oneToOne(target: "artwork")
 }
 
 model Invitation {
-    id        String   @id @default(uuid())
-    group     Group    @relation(fields: [groupId], references: [id])
-    groupId   String
-    email     String
-    token     String   @unique
-    status    InvitationStatus
-    createdAt DateTime @default(now())
+    id            Int      @id @default(autoincrement())
+    groupId       Int      @unique
+    invitedUserId Int      @unique
+    expiresAt     DateTime
+    isUsed        Boolean  @default(false)
+
+    // Relationships
+    group Group @oneToManyInverse(field: "invitations", targetField: "groupId")
 }
 
 model Notification {
-    id        String   @id @default(uuid())
-    artist    Artist   @relation(fields: [artistId], references: [id])
-    artistId  String
+    id        Int              @id @default(autoincrement())
+    userId    Int              @unique
     type      NotificationType
     message   String
-    read      Boolean  @default(false)
     createdAt DateTime         @default(now())
+    isRead    Boolean          @default(false)
+
+    // Relationships
+    user User @oneToManyInverse(field: "notifications", targetField: "id")
 }
